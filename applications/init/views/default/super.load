{{'''
# License: Public Domain
# Author: Iceberg at 21cn dot com

With this generic.load file, you can use same function to serve two purposes.

= regular action
- ajax callback (when called with .load)

Example modified from http://www.web2py.com/AlterEgo/default/show/252:

def index():
    return dict(
		part1='hello world',
        	part2=LOAD(url=URL(r=request,f='auxiliary.load'),ajax=True))

def auxiliary():
    form=SQLFORM.factory(Field('name'))
    if form.accepts(request.vars):
        response.flash = 'ok'
        return dict(message="Hello %s" % form.vars.name)
    return dict(form=form)

Notice:

- no need to set response.headers['web2py-response-flash']
- no need to return a string
even if the function is called via ajax.

'''}}{{if len(response._vars)==1:}}{{=response._vars.values()[0]}}{{else:}}{{=BEAUTIFY(response._vars)}}{{pass}}

{{include}}

{{block load_js}}
<script>  {{#http://bit.ly/2itgFxG}}
$(document).ajaxStop(function() {  {{#http://bit.ly/2itnmzG - call when all outstanding ajax complete, no need to call same code for each table}}
    $('[title]').tooltip({html: true});
    $('.multiselect.dropdown-toggle').attr({'data-original-title': 'edit'});
    $(".web2py_htmltable").animate({'min-height': "33em", 'background-color': "#FBF9FF"});  {{# http://bit.ly/2ithnuW}}
    $("[multiple='multiple'][class!='autocomplete']").multiselect("refresh");  {{# select all multi widgets, but not with those hidden autocomplete dropdowns (also has multiple=multiple attr))}}

{{#$( "input[name^='_autocomplete_']" ).addClass('form-control');}}  {{#starts with selector https://api.jquery.com/attribute-starts-with-selector/}}
    $("input[autocomplete='off']").each(function (i, obj) {
                $(obj).addClass('form-control');
            }
    ); {{#starts with selector https://api.jquery.com/attribute-starts-with-selector/}}
})
</script>
{{end}}